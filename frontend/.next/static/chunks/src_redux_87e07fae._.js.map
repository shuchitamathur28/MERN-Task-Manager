{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://G%3A/SHUCHI/learn_react/task-manager/frontend/src/redux/taskSlice.ts"],"sourcesContent":["\"use client\";\r\n\r\nimport { createSlice, PayloadAction, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\ninterface Task {\r\n  id: number;\r\n  text: string;\r\n  completed: boolean; \r\n}\r\n\r\ninterface TaskState {\r\n  tasks: Task[];\r\n}\r\n\r\nconst initialState: TaskState = {\r\n  tasks: [],\r\n};\r\n\r\nexport const fetchTasks = createAsyncThunk(\"tasks/fetchTasks\", async () => {\r\n  const response = await fetch(\"http://localhost:5000/api/tasks\");\r\n  return response.json();\r\n});\r\n\r\nexport const addTask = createAsyncThunk(\"tasks/addTask\", async (text: string) => {\r\n  const response = await fetch(\"http://localhost:5000/api/tasks\", {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ text }),\r\n  });\r\n  return response.json();\r\n});\r\n\r\nexport const deleteTask = createAsyncThunk(\"tasks/deleteTask\", async (taskId: string) => {\r\n  await fetch(`http://localhost:5000/api/tasks/${taskId}`, {\r\n    method: \"DELETE\",\r\n  });\r\n  return taskId; // Return the deleted task ID to update the state\r\n});\r\n\r\nconst taskSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: { tasks: [], loading: false, error: null },\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchTasks.fulfilled, (state, action) => {\r\n        state.tasks = action.payload;\r\n      })\r\n      .addCase(addTask.fulfilled, (state, action) => {\r\n        state.tasks.push(action.payload);\r\n      })\r\n      .addCase(deleteTask.fulfilled, (state, action) => {\r\n        state.tasks = state.tasks.filter(task => task._id !== action.payload)\r\n      });\r\n  },\r\n});\r\n\r\nexport default taskSlice.reducer;\r\n"],"names":[],"mappings":";;;;;;AAEA;AAFA;;AAcA,MAAM,eAA0B;IAC9B,OAAO,EAAE;AACX;AAEO,MAAM,aAAa,CAAA,GAAA,8LAAA,CAAA,mBAAgB,AAAD,EAAE,oBAAoB;IAC7D,MAAM,WAAW,MAAM,MAAM;IAC7B,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,UAAU,CAAA,GAAA,8LAAA,CAAA,mBAAgB,AAAD,EAAE,iBAAiB,OAAO;IAC9D,MAAM,WAAW,MAAM,MAAM,mCAAmC;QAC9D,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;QAC9C,MAAM,KAAK,SAAS,CAAC;YAAE;QAAK;IAC9B;IACA,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,aAAa,CAAA,GAAA,8LAAA,CAAA,mBAAgB,AAAD,EAAE,oBAAoB,OAAO;IACpE,MAAM,MAAM,CAAC,gCAAgC,EAAE,QAAQ,EAAE;QACvD,QAAQ;IACV;IACA,OAAO,QAAQ,iDAAiD;AAClE;AAEA,MAAM,YAAY,CAAA,GAAA,8LAAA,CAAA,cAAW,AAAD,EAAE;IAC5B,MAAM;IACN,cAAc;QAAE,OAAO,EAAE;QAAE,SAAS;QAAO,OAAO;IAAK;IACvD,UAAU,CAAC;IACX,eAAe,CAAC;QACd,QACG,OAAO,CAAC,WAAW,SAAS,EAAE,CAAC,OAAO;YACrC,MAAM,KAAK,GAAG,OAAO,OAAO;QAC9B,GACC,OAAO,CAAC,QAAQ,SAAS,EAAE,CAAC,OAAO;YAClC,MAAM,KAAK,CAAC,IAAI,CAAC,OAAO,OAAO;QACjC,GACC,OAAO,CAAC,WAAW,SAAS,EAAE,CAAC,OAAO;YACrC,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,MAAM,CAAC,CAAA,OAAQ,KAAK,GAAG,KAAK,OAAO,OAAO;QACtE;IACJ;AACF;uCAEe,UAAU,OAAO","debugId":null}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":["file://G%3A/SHUCHI/learn_react/task-manager/frontend/src/redux/store.ts"],"sourcesContent":["\"use client\";\r\n\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport taskReducer from \"./taskSlice\";\r\n\r\nconst persistedState = typeof window !== \"undefined\" ? JSON.parse(localStorage.getItem(\"tasks\") || \"[]\") : [];\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    tasks: taskReducer,\r\n  },\r\n  preloadedState: { tasks: { tasks: persistedState } },\r\n});\r\n\r\nstore.subscribe(() => {\r\n  localStorage.setItem(\"tasks\", JSON.stringify(store.getState().tasks.tasks));\r\n});\r\n\r\n// Infer RootState and AppDispatch types\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport default store;"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;AAKA,MAAM,iBAAiB,uCAAgC,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,YAAY;AAE5F,MAAM,QAAQ,CAAA,GAAA,8LAAA,CAAA,iBAAc,AAAD,EAAE;IAClC,SAAS;QACP,OAAO,4HAAA,CAAA,UAAW;IACpB;IACA,gBAAgB;QAAE,OAAO;YAAE,OAAO;QAAe;IAAE;AACrD;AAEA,MAAM,SAAS,CAAC;IACd,aAAa,OAAO,CAAC,SAAS,KAAK,SAAS,CAAC,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK;AAC3E;uCAMe","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file://G%3A/SHUCHI/learn_react/task-manager/frontend/src/redux/Provider.tsx"],"sourcesContent":["\"use client\"; // Required for client components\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface Props {\r\n  children: ReactNode;\r\n}\r\n\r\nexport default function ReduxProvider({ children }: Props) {\r\n  return <Provider store={store}>{children}</Provider>;\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA,cAAc,iCAAiC;;;;AAUhC,SAAS,cAAc,EAAE,QAAQ,EAAS;IACvD,qBAAO,6LAAC,4JAAA,CAAA,WAAQ;QAAC,OAAO,wHAAA,CAAA,QAAK;kBAAG;;;;;;AAClC;KAFwB","debugId":null}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}